import customtkinter
import tkinter
import pandas as pd
import time
import calendar
import os
import webbrowser

# =============== DATE ==============
TodaysDate = time.strftime("%d-%m-%Y")

# ============== File name ==========
excelfilename = "ATA " + TodaysDate + ".xlsx"

# ============== Variables ==========
alias = os.getlogin()
sheet_name = "Answer Resuslt"
file_name = "QA Dashboard.xlsm"
# current_dir = str(Path().absolute())
current_dir = str(os.path.abspath(__file__))

# ============= Functions ============
def button_callback():
    os.startfile(os.path.abspath('Rules.xlsx'))
    
def button_callback3():
    os.startfile(os.path.abspath('ATA_Results'))
    
def button_callback4(): 
    webbrowser.open('https://') 

def button_callback2(): 
    if len(entry_week.get()) == 0:
        tkinter.messagebox.showwarning(title="Warning", message="Week number field is missing. Please add week number.")
        return
    elif optionmenu_1.get() == "Select marketplace":
        tkinter.messagebox.showwarning(title="Warning", message="Please select marketplace.")
        return
    elif len(entry_sample.get()) == 0:
        tkinter.messagebox.showwarning(title="Warning", message="Sample size field is missing. Please add sample size.")
        return
    else:
        weeknr = int(entry_week.get())
        no_name = optionmenu_1.get()
        sample_size = int(entry_sample.get())

# ============== Rules ==============
    # Auditors
    df_auditors = pd.read_excel('Rules.xlsx', 'Auditors')
    associate_list = df_auditors['Auditor'].values.tolist()
    # Process
    df_process = pd.read_excel('Rules.xlsx', 'Processes')
    process_list = df_process['Process'].values.tolist()
       
# ============== DF Answer Export Data ===================
    df = pd.read_excel(file_name, sheet_name)
    df = pd.merge(df, 
                    df_auditors, 
                    on ='Auditor', 
                    how ='inner')
    
# =========== FILTERS =============
    df_filtered = df.loc[(df['Week'] == weeknr) & (df['Auditor'].isin(associate_list)) & (df['Process'].isin(process_list))] 

# =========== Column name ===========
    df_filtered['NO'] = no_name
    df_filtered['Program Name'] = 'QA_EU'
    df_filtered['Sub Task'] = df_filtered['Process'] 
    df_filtered['Audit Week'] = df_filtered['Week']#pd.to_datetime(df.loc[(df['Week'] == weeknr), 'Year'].astype(str) + df.loc[(df['Week'] == weeknr), 'Week'].astype(str)  + '-0-1', format='%Y%U-%w-%j')
    df_filtered['Marketplace'] = df_filtered['Marketplace']
    df_filtered['Audit Month'] = df_filtered['Month'].apply(lambda x: calendar.month_abbr[x])
    df_filtered['Audit Quarter'] = 'Q' + (((df_filtered['Audit Week'] -1) // 13) +1).astype(str)
    df_filtered['ATA Auditor'] = alias
    df_filtered['Auditor'] = df_filtered['Auditor']
    df_filtered['Auditor\'s Manager'] = df_filtered['Manager']
    df_filtered['Audit Sample'] = ""
    df_filtered['ATA Sample'] = ""
    df_filtered['Defectives'] = ""
    df_filtered['QA Score'] = ""
    df_filtered['Comment'] = ""
    
    # drop columns
    df_filtered = df_filtered.drop(columns=['Question no','Answer','Coverage', 'Year', 'Month', 'Week',
         'Parameter', 'Score', 'User', 'Process', 'Year','result', 'Manager'])

    # change order
    df_filtered = df_filtered.iloc[:,[5,6,7,8,4,9,10,11,3,12,13,14,15,16,2,0,1]]

    # sort values
    df_filtered.sort_values(by=['Auditor'])    

    # drop duplicates 
    df_filtered.drop_duplicates(subset=None, inplace=True)
    
# ============== COUNT SHEET ====================    
    df_count = df_filtered.groupby(['Auditor', 'Sub Task'])['Task/Case ID'].count().reset_index(name="count")
    df_filtered = df_filtered.merge(df_count, on=['Auditor', 'Sub Task'], how='left')
    df_filtered['Audit Sample'] = df_filtered['count']
    df_filtered.drop(['count'], axis=1, inplace=True)
    
# ============= SAMPLING ================
    def sample_2pct(group):
        frac = sample_size / 100
        if len(group) * frac < 1.4:
            return group.sample(1)
        elif len(group) * frac < 2:
            return group.sample(2)
        else:
            return group.sample(frac=frac)
        
    df_grouped = df_filtered.groupby(['Auditor', 'Sub Task'], as_index=False, sort=True).apply(sample_2pct)
    df_grouped['ATA Sample'] =df_grouped.groupby(['Auditor', 'Sub Task']).cumcount() + 1
    
# ============= SAMPE SHEET ================
    df_sort = df_grouped.sort_values(by=['Auditor', 'Sub Task'])
    df_sample = df_sort.drop(columns=['NO','Program Name','Audit Quarter', 'Audit Sample', 'ATA Sample', 'ATA Auditor', "Auditor's Manager"],)
    df_sample = df_sample.iloc[:,[8,9,0,2,4,1,3,5,6,7]]
                
# =============== MAIN SHEET ===================
    df_sort2 = df_sort.copy()
    df_sort2 = df_sort2.drop(columns=['Task/Case ID',	'Case Score'],)
    df_sort2 = df_sort2.drop_duplicates()
    
# ================ SAVE FILE =================
    # df_sort.to_excel(r'ATA_Results/' + excelfilename, sheet_name = 'Output', index = False)
    with pd.ExcelWriter(r'ATA_Results/' + excelfilename) as writer:  # pylint: disable=abstract-class-instantiated
        df_sample.to_excel(writer, sheet_name='Sample',  index = False)
        df_sort2.to_excel(writer, sheet_name='Sharepoint',  index = False)
    
    tkinter.messagebox.showinfo(title="Completed", message="Done. You can start your audit.")

# ============== Application ============
customtkinter.set_appearance_mode("dark")  # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

app = customtkinter.CTk()
app.geometry("400x680")
app.title("ATA Automation")

frame_1 = customtkinter.CTkFrame(master=app)
frame_1.pack(pady=20, padx=60, fill="both", expand=True)

label_ATA = customtkinter.CTkLabel(master=frame_1, text="ATA Automation", font=("Roboto", 24), justify=customtkinter.LEFT)
label_ATA.pack(pady=10, padx=10)

button_run = customtkinter.CTkButton(master=frame_1, fg_color=("white", "green"), text="Run automation",  command=button_callback2) #command=button_callback
button_run.pack(pady=10, padx=10)

entry_week = customtkinter.CTkEntry(master=frame_1, placeholder_text="Week number")
entry_week.pack(pady=20, padx=10)

optionmenu_1 = customtkinter.CTkOptionMenu(frame_1, values=["RO", "NMP"])
optionmenu_1.pack(pady=10, padx=10)
optionmenu_1.set("Select marketplace")

label_2 = customtkinter.CTkLabel(master=frame_1, text="Sample size", font=("Roboto", 20), justify=customtkinter.LEFT)
label_2.pack(pady=10, padx=10)

frame_1 = customtkinter.CTkFrame(master=frame_1) 
frame_1.pack() 

entry_sample = customtkinter.CTkEntry(master=frame_1, placeholder_text="Enter sample percent")
entry_sample.pack(pady=20, padx=10)
 
button_2 = customtkinter.CTkButton(master=frame_1, text="Associate list", command=button_callback)
button_2.pack(pady=50, padx=10)

button_4 = customtkinter.CTkButton(master=frame_1, text="Output", command=button_callback3)
button_4.pack(pady=10, padx=10)

button_5 = customtkinter.CTkButton(master=frame_1, text="Sharepoint", command=button_callback4) 
button_5.pack(pady=10, padx=10)

app.mainloop()
